# ====================================================================================
# WORKER SERVICE ENVIRONMENT VARIABLES TEMPLATE
# ====================================================================================
# This file contains all environment variables required for the worker service.
# Copy this file to .env and update values for your deployment environment.
#
# REQUIRED VARIABLES: All variables marked as [REQUIRED] must be set
# OPTIONAL VARIABLES: Variables marked as [OPTIONAL] have sensible defaults
# FORMAT: Each variable includes expected format, examples, and usage notes
#
# Security Notes:
# - Never commit .env files with real credentials to version control
# - Use different values for development, staging, and production
# - Store sensitive credentials in secure secret management systems
# ====================================================================================

# -----------------------------------------------------------------------------------
# CELERY MESSAGE BROKER CONFIGURATION [REQUIRED]
# -----------------------------------------------------------------------------------
# Celery broker URL for task queue management and worker coordination.
# Supported brokers: Redis, RabbitMQ, or database backends
#
# Format: <scheme>://[user:password@]<host>:<port>/<database_or_vhost>
# Examples:
#   Redis:         redis://localhost:6379/0
#   Redis w/auth:  redis://user:password@redis:6379/0
#   RabbitMQ:      amqp://localhost:5672//
#   Database:      db+postgresql://user:pass@host/db
#
# Production considerations:
# - Use secure connections (rediss://) for production
# - Set appropriate connection and pool limits
# - Monitor broker performance and queue depth
# -----------------------------------------------------------------------------------
CELERY_BROKER_URL=redis://redis:6379/0

# -----------------------------------------------------------------------------------
# CELERY RESULT BACKEND CONFIGURATION [REQUIRED]
# -----------------------------------------------------------------------------------
# Storage backend for Celery task results and worker status
# Usually the same as broker, but can be different for performance
#
# Format: Same as CELERY_BROKER_URL
# Examples: Same as above
#
# Use Cases:
# - Store task results for monitoring and retrieval
# - Enable retries and job status tracking
# - Support long-running task visibility
# -----------------------------------------------------------------------------------
CELERY_RESULT_BACKEND=redis://redis:6379/0

# -----------------------------------------------------------------------------------
# CELERY PERFORMANCE TUNING [OPTIONAL]
# -----------------------------------------------------------------------------------
# Advanced Celery configuration for production optimization
# These variables are optional and have sensible defaults

# Connection pool limits for broker connections
# CELERY_BROKER_POOL_LIMIT=10

# Worker concurrency - number of tasks per worker
# CELERY_WORKER_CONCURRENCY=4

# Worker prefetch multiplier (0 disables prefetch)
# CELERY_WORKER_PREFETCH_MULTIPLIER=4

# Task result expiry in seconds
# CELERY_TASK_RESULT_EXPIRES=3600

# -----------------------------------------------------------------------------------
# DATABASE CONFIGURATION [REQUIRED]
# -----------------------------------------------------------------------------------
# PostgreSQL database connection string for job and document storage
#
# Format:
#   postgresql://<user>:<password>@<host>:<port>/<database>
# Or with optional parameters:
#   postgresql://user:pass@host:5432/db?ssl=true&sslcert=/path/to/cert
#
# Examples:
#   Local dev:     postgresql://postgres:password@localhost:5432/docgenerator
#   Docker:        postgresql://user:password@db:5432/mydatabase
#   Cloud:         postgresql://user:password@myhost.compute.amazonaws.com:5432/db
#
# Security Requirements:
# - Use strong passwords
# - Enable SSL/TLS connections in production
# - Use connection pools for performance
# - Implement proper authentication and authorization
# -----------------------------------------------------------------------------------
DATABASE_URL=postgresql://user:password@db:5432/mydatabase

# -----------------------------------------------------------------------------------
# DATABASE CONNECTION POOLING [OPTIONAL]
# -----------------------------------------------------------------------------------
# Database connection pool settings for performance optimization
# These control connection lifecycle and resource usage

# Maximum connections in the pool (default: 10)
# DATABASE_POOL_SIZE=20

# Minimum connections to maintain (default: 2)
# DATABASE_POOL_RECYCLE=300

# Connection timeout in seconds (default: 30)
# DATABASE_CONNECT_TIMEOUT=30

# Pre-ping connections before use (default: true)
# DATABASE_PRE_PING=true

# -----------------------------------------------------------------------------------
# DATABASE ENCRYPTION [OPTIONAL]
# -----------------------------------------------------------------------------------
# Encryption key for sensitive database credentials
# Used for encrypting stored credentials in the database
#
# Format: 32-byte hex key (64 characters)
# Generation: Use `python -c "import os, binascii; print(binascii.hexlify(os.urandom(32)).decode())"`
#
# Security Notes:
# - Generate unique keys for each environment
# - Store securely (vault, secret manager, separate config)
# - Never hardcode in source code
# - Rotate regularly for security
# -----------------------------------------------------------------------------------
# DATABASE_ENCRYPTION_KEY=your_64_character_hex_key_here

# -----------------------------------------------------------------------------------
# GITHUB INTEGRATION [REQUIRED]
# -----------------------------------------------------------------------------------
# GitHub Personal Access Token for repository access and API operations
#
# Permissions Required:
# - repo (Full control of private repositories)
# - read:org (Read org and team membership)
#
# Creation Steps:
# 1. Go to https://github.com/settings/tokens
# 2. Generate new token with required scopes
# 3. Keep token secure and rotate periodically
#
# Usage Examples:
# - Clone private repositories
# - Create GitHub PRs with documentation updates
# - Access repository metadata and issues
#
# Security Notes:
# - Treat like a password - never expose in logs
# - Use fine-grained permissions when possible
# - Monitor token usage for anomalies
# -----------------------------------------------------------------------------------
GITHUB_TOKEN=your_github_token_here

# -----------------------------------------------------------------------------------
# GITHUB API CONFIGURATION [OPTIONAL]
# -----------------------------------------------------------------------------------
# Additional GitHub integration settings

# GitHub API timeout in seconds (default: 30)
# GITHUB_API_TIMEOUT=30

# GitHub App ID for OAuth integrations (if using GitHub App instead of PAT)
# GITHUB_APP_ID=your_app_id

# GitHub App Private Key file path (for GitHub App authentication)
# GITHUB_APP_PRIVATE_KEY_PATH=/path/to/private-key.pem

# -----------------------------------------------------------------------------------
# LOGGING CONFIGURATION [OPTIONAL]
# -----------------------------------------------------------------------------------
# Application logging settings for debugging and monitoring

# Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL (default: INFO)
# LOG_LEVEL=INFO

# Log file path for persistent logging (optional)
# LOG_FILE=/app/logs/worker.log

# Maximum log file size in bytes (default: 10MB)
# LOG_MAX_BYTES=10485760

# Number of backup log files to keep (default: 5)
# LOG_BACKUP_COUNT=5

# -----------------------------------------------------------------------------------
# TEMPORARY FILE STORAGE [OPTIONAL]
# -----------------------------------------------------------------------------------
# Directory for temporary files during repository processing

# Temporary directory path (default: /tmp/repos)
# TMP_DIR=/tmp/repos

# Maximum temp directory size in GB (default: 10)
# TMP_DIR_MAX_SIZE_GB=10

# Temp file cleanup interval in seconds (default: 3600)
# TMP_CLEANUP_INTERVAL=3600

# -----------------------------------------------------------------------------------
# WORKER HEALTH CHECKS [OPTIONAL]
# -----------------------------------------------------------------------------------
# Health check configuration for monitoring

# Health check interval in seconds (default: 30)
# HEALTH_CHECK_INTERVAL=30

# Maximum consecutive failures before restart (default: 5)
# HEALTH_CHECK_MAX_FAILURES=5

# -----------------------------------------------------------------------------------
# PRODUCTION OPTIMIZATION [OPTIONAL]
# -----------------------------------------------------------------------------------
# Additional settings for production deployment

# Enable production optimizations (default: false)
# PRODUCTION_MODE=true

# Python optimization level (default: -O - no optimizations)
# PYTHON_OPTIMIZE=1

# Disable Python bytecode files (default: false)
# PYTHONDONTWRITEBYTECODE=true

# Garbage collection thresholds (comma-separated)
# PYTHONGC=200,10,10

# ====================================================================================
# END OF CONFIGURATION
# ====================================================================================

# Additional Notes:
# - Environment variables override these defaults
# - Use Docker secrets or Kubernetes configmaps for sensitive values
# - Test configuration changes in staging before production
# - Monitor resource usage and adjust pool sizes as needed
# - Keep this file updated as new configuration options are added