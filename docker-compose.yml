services:
  frontend:
    build:
      context: .
      dockerfile: infra/frontend.Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    volumes: # Mount the frontend code for development
      - ./frontend:/app/frontend
      - /app/frontend/node_modules # Anonymous volume to prevent host node_modules from overwriting container's
    env_file:
      - ./frontend/.env
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512MB
        reservations:
          cpus: '0.25'
          memory: 256MB

  backend:
    build:
      context: .
      dockerfile: infra/backend.Dockerfile
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      db:
        condition: service_healthy
    volumes: # Mount the backend code for development
      - ./backend:/app/backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1024MB
        reservations:
          cpus: '0.5'
          memory: 512MB

  worker:
    build:
      context: .
      dockerfile: infra/worker.Dockerfile
    env_file:
      - ./worker/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes: # Mount the worker code for development
      - ./worker:/app/worker
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "celery -A worker.worker inspect ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256MB
        reservations:
          cpus: '0.25'
          memory: 128MB

  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512MB
        reservations:
          cpus: '0.5'
          memory: 256MB

  redis:
    image: redis:6-alpine
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128MB
        reservations:
          cpus: '0.1'
          memory: 64MB

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge